{"version":3,"sources":["static/eds_logo.png","PaypalButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PaypalButton","props","state","showButton","window","React","ReactDOM","this","isScriptLoaded","isScriptLoadSucceed","setState","nextProps","total","currency","env","commit","client","onSuccess","onError","onCancel","paypal","PAYPAL","Button","react","payment","rest","create","transactions","amount","onAuthorize","data","actions","execute","then","paid","cancelled","payerID","paymentID","paymentToken","returnUrl","Component","scriptLoader","CLIENT","sandbox","process","production","App","Container","Row","Col","className","Image","src","EDSLogo","fluid","style","visibility","console","log","error","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,sC,sPCOrCC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAY,GAGdC,OAAOC,MAAQA,IACfD,OAAOE,SAAWA,IAPD,E,iFASE,IAAD,EAC8BC,KAAKN,MAA7CO,EADU,EACVA,eAAgBC,EADN,EACMA,oBACpBD,GAAkBC,GACpBF,KAAKG,SAAS,CAAEP,YAAY,M,gDAGNQ,GAAY,IAC5BH,EAAwCG,EAAxCH,eAAgBC,EAAwBE,EAAxBF,qBAErBF,KAAKL,MAAMC,aAAeI,KAAKN,MAAMO,gBAAkBA,GAEpDC,GACFF,KAAKG,SAAS,CAAEP,YAAY,M,+BAIxB,IAAD,EAUHI,KAAKN,MARPW,EAFK,EAELA,MACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,IACAC,EALK,EAKLA,OACAC,EANK,EAMLA,OACAC,EAPK,EAOLA,UACAC,EARK,EAQLA,QACAC,EATK,EASLA,SAEMhB,EAAeI,KAAKL,MAApBC,WACFiB,EAAShB,OAAOiB,OA2BtB,OACE,6BACGlB,GACC,kBAACiB,EAAOE,OAAOC,MAAf,CACET,IAAKA,EACLE,OAAQA,EACRD,OAAQA,EACRS,QAhCQ,kBACdJ,EAAOK,KAAKD,QAAQE,OAAOZ,EAAKE,EAAQ,CACtCW,aAAc,CACZ,CACEC,OAAQ,CACNhB,QACAC,iBA2BFgB,YArBY,SAACC,EAAMC,GAAP,OAClBA,EAAQP,QAAQQ,UAAUC,MAAK,WAC7B,IAAMT,EAAU,CACdU,MAAM,EACNC,WAAW,EACXC,QAASN,EAAKM,QACdC,UAAWP,EAAKO,UAChBC,aAAcR,EAAKQ,aACnBC,UAAWT,EAAKS,WAElBtB,EAAUO,OAYNL,SAAUA,EACVD,QAASA,S,GA3EMsB,aAkFZC,MAAa,gDAAbA,CACbzC,G,iBC9EI0C,G,YAAS,CACbC,QAASC,mFACTC,WAAYD,qFAqCCE,E,iLA1BX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAASC,OAAK,IAC1B,yBAAKC,MAAO,CAAEC,WAAY,WACxB,kBAAC,EAAD,CACExC,OAAQ0B,EACR5B,IAjBkC,aAkBlCC,QAAQ,EACRF,SAAU,MACVD,MAAO,IACPK,UAjBI,SAAAO,GAAO,OAAIiC,QAAQC,IAAI,sBAAuBlC,IAkBlDN,QAjBE,SAAAyC,GAAK,OACnBF,QAAQC,IAAI,8CAA+CC,IAiB/CxC,SAhBG,SAAAW,GAAI,OAAI2B,QAAQC,IAAI,qBAAsB5B,e,GAL7CU,aCPEoB,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASC,MACvB,2DCVNzD,IAAS0D,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.f2b0fe79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eds_logo.74a19579.png\";","// @flow\n\nimport React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport scriptLoader from 'react-async-script-loader'\n// import paypal from 'paypal-rest-sdk'\n\nclass PaypalButton extends Component<{}, {}> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showButton: false\n    }\n\n    window.React = React\n    window.ReactDOM = ReactDOM\n  }\n  componentDidMount() {\n    const { isScriptLoaded, isScriptLoadSucceed } = this.props\n    if (isScriptLoaded && isScriptLoadSucceed) {\n      this.setState({ showButton: true })\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    const { isScriptLoaded, isScriptLoadSucceed } = nextProps\n    const isLoadedButWasntLoadedBefore =\n      !this.state.showButton && !this.props.isScriptLoaded && isScriptLoaded\n    if (isLoadedButWasntLoadedBefore) {\n      if (isScriptLoadSucceed) {\n        this.setState({ showButton: true })\n      }\n    }\n  }\n  render() {\n    const {\n      total,\n      currency,\n      env,\n      commit,\n      client,\n      onSuccess,\n      onError,\n      onCancel\n    } = this.props\n    const { showButton } = this.state\n    const paypal = window.PAYPAL\n\n    const payment = () =>\n      paypal.rest.payment.create(env, client, {\n        transactions: [\n          {\n            amount: {\n              total,\n              currency\n            }\n          }\n        ]\n      })\n\n    const onAuthorize = (data, actions) =>\n      actions.payment.execute().then(() => {\n        const payment = {\n          paid: true,\n          cancelled: false,\n          payerID: data.payerID,\n          paymentID: data.paymentID,\n          paymentToken: data.paymentToken,\n          returnUrl: data.returnUrl\n        }\n        onSuccess(payment)\n      })\n\n    return (\n      <div>\n        {showButton && (\n          <paypal.Button.react\n            env={env}\n            client={client}\n            commit={commit}\n            payment={payment}\n            onAuthorize={onAuthorize}\n            onCancel={onCancel}\n            onError={onError}\n          />\n        )}\n      </div>\n    )\n  }\n}\nexport default scriptLoader('https://www.paypalobjects.com/api/checkout.js')(\n  PaypalButton\n)\n","import React, { Component } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Image from 'react-bootstrap/Image'\n\nimport PaypalButton from './PaypalButton'\nimport EDSLogo from './static/eds_logo.png'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nconst CLIENT = {\n  sandbox: process.env.REACT_APP_PAYPAL_CLIENT_ID_SANDBOX,\n  production: process.env.REACT_APP_PAYPAL_CLIENT_ID_PRODUCTION\n}\n\nconst ENV = process.env.NODE_ENV === 'production' ? 'production' : 'sandbox'\n\nclass App extends Component<> {\n  render() {\n    const onSuccess = payment => console.log('Successful payment!', payment)\n    const onError = error =>\n      console.log('Erroneous payment OR failed to load script!', error)\n    const onCancel = data => console.log('Cancelled payment!', data)\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <div className=\"text-center\">\n              <Image src={EDSLogo} fluid />\n              <div style={{ visibility: 'hidden' }}>\n                <PaypalButton\n                  client={CLIENT}\n                  env={ENV}\n                  commit={true}\n                  currency={'USD'}\n                  total={150}\n                  onSuccess={onSuccess}\n                  onError={onError}\n                  onCancel={onCancel}\n                />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}